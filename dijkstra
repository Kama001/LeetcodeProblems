#include<bits/stdc++.h>
using namespace std;
int main() {
    vector<vector<int>> edgeList{{0,1,4},{0,7,8},{1,2,8},{1,7,11},{2,3,7},{2,8,2},{2,5,4},{3,4,9},{3,5,14},
                             {4,5,10},{5,6,2},{6,7,1},{6,8,6},{7,8,7}};
    unordered_map<int, vector<pair<int, int>> > adjList;
    for(int i = 0; i < edgeList.size(); i++) {
            adjList[edgeList[i][0]].push_back(make_pair(edgeList[i][1], edgeList[i][2]));
            adjList[edgeList[i][1]].push_back(make_pair(edgeList[i][0], edgeList[i][2]));
    }
    int n = 9;
    vector<int> dist(n, INT_MAX);
    set<pair<int,int>> pq;
    pq.insert(make_pair(0, 0));
    while(!pq.empty()) {
        int node = pq.begin()->second;
        int distance = pq.begin()->first;
        dist[node] = distance;
        
        cout << node << " " << distance << endl;
        
        pq.erase(pq.begin());
        for(auto it = adjList[node].begin(); it != adjList[node].end(); it++) {
            if(dist[it->first] >= distance + it->second) {
                cout  << it->first << " " << distance + it->second  <<endl;
                if(dist[it->first] != INT_MAX) 
                    pq.erase(pq.find(make_pair(dist[it->first], it->first)));
                dist[it->first] = distance + it->second;
                pq.insert(make_pair(dist[it->first], it->first));
            }
        }
        cout << "\n===========\n";
    }
    for(auto a: dist)
        cout << a << " ";
}
